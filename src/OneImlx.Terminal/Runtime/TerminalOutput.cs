/*
    Copyright © 2019-2025 Perpetual Intelligence L.L.C. All rights reserved.

    For license, terms, and data policies, go to:
    https://terms.perpetualintelligence.com/articles/intro.html
*/

using System;
using System.Text.Json;
using System.Text.Json.Serialization;

namespace OneImlx.Terminal.Runtime
{
    /// <summary>
    /// Represents the output generated by the terminal server in response to <see cref="TerminalInput"/>.
    /// </summary>
    public sealed class TerminalOutput
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TerminalOutput"/> class.
        /// </summary>
        /// <param name="input">The terminal input.</param>
        /// <param name="senderId">The sender id.</param>
        /// <param name="senderEndpoint">The sender endpoint.</param>
        [JsonConstructor]
        public TerminalOutput(TerminalInput input, string? senderId, string? senderEndpoint)
        {
            Input = input ?? throw new ArgumentNullException(nameof(input));

            SenderId = senderId;
            SenderEndpoint = senderEndpoint;
        }

        /// <summary>
        /// The terminal input.
        /// </summary>
        [JsonPropertyName("input")]
        public TerminalInput Input { get; }

        /// <summary>
        /// The sender endpoint.
        /// </summary>
        [JsonPropertyName("sender_endpoint")]
        public string? SenderEndpoint { get; }

        /// <summary>
        /// The sender identifier.
        /// </summary>
        [JsonPropertyName("sender_id")]
        public string? SenderId { get; }

        /// <summary>
        /// Retrieves a result at a given index, converting it to the specified type if necessary.
        /// </summary>
        public T GetDeserializedResult<T>(int index)
        {
            if (index < 0 || index >= Input.Requests.Length)
            {
                throw new ArgumentOutOfRangeException(nameof(index), "Index is out of range.");
            }

            var request = Input.Requests[index];

            // If the result is a JsonElement, deserialize it to the desired type
            if (request.Result is JsonElement jsonElement)
            {
                return jsonElement.Deserialize<T>() ?? throw new JsonException($"Result deserialization failed at index '{index}' for type '{typeof(T).FullName}'.");
            }

            // Return directly if already of the correct type
            return (T)request.Result!;
        }
    }
}
